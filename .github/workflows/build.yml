name: Build Qt with v141_xp
run-name: Qt 5.15.16 Build by @${{ github.actor }}

on:
  push:
    branches: [ main ]
    paths:
      - '5.15.16/**'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '5.15.16/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:

env:
  QT_VERSION: 5.15.16
  BUILD_TYPE: Release
  INSTALL_PATH: C:\Qt\5.15.16-install-xp
  PATCH_DIR: 5.15.16
  MSVC_VERSION: 2019
  BUILD_TOOLS_PATH: C:\BuildTools

jobs:
  build:
    name: Build Qt for Windows XP
    runs-on: windows-2019
    timeout-minutes: 7200 # 120 hours limit

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0 # Full history for patches

    - name: Cache Qt Installation
      id: cache-qt-install
      uses: actions/cache@v3
      with:
        path: ${{ env.INSTALL_PATH }}
        key: ${{ runner.os }}-qt-${{ env.QT_VERSION }}-xp-${{ hashFiles(format('{0}/*.patch', env.PATCH_DIR)) }}

    - name: Install Build Dependencies
      if: steps.cache-qt-install.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        Write-Host "::group::Installing Visual Studio 2017 (v141) Build Tools with XP support"
        Invoke-WebRequest -Uri "https://aka.ms/vs/16/release/vs_buildtools.exe" -OutFile "$env:TEMP\vs_buildtools.exe"
        $process = Start-Process -FilePath "$env:TEMP\vs_buildtools.exe" -ArgumentList `
          '--quiet', '--wait', '--norestart', '--nocache', `
          '--installPath', '${{ env.BUILD_TOOLS_PATH }}', `
          '--add', 'Microsoft.VisualStudio.Component.VC.v141.x86.x64', `
          '--add', 'Microsoft.VisualStudio.Component.VC.v141.xp' `
          -Wait -NoNewWindow -PassThru
        if ($process.ExitCode -ne 0) {
          Write-Error "Visual Studio Build Tools installation failed with exit code $($process.ExitCode)"
          exit 1
        }
        $vcvarsPath = "${{ env.BUILD_TOOLS_PATH }}\VC\Auxiliary\Build\vcvarsall.bat"
        if (-not (Test-Path $vcvarsPath)) {
          Write-Error "vcvarsall.bat not found after installation! Path checked: $vcvarsPath"
          exit 1
        }
        Write-Host "VS Build Tools for v141_xp installed successfully."
        Write-Host "::endgroup::"
        
        Write-Host "::group::Installing Chocolatey packages"
        choco install strawberryperl ninja openssl -y --no-progress
        refreshenv
        Write-Host "::endgroup::"
        
        Write-Host "::group::Verifying all required tools"
        # The runner image already has Python and Ruby
        $tools = @{
          "Python"  = "python --version"
          "Perl"    = "perl --version"
          "Ninja"   = "ninja --version"
          "OpenSSL" = "openssl version"
        }
        foreach ($tool in $tools.GetEnumerator()) {
          Write-Host "Checking $($tool.Key)..."
          Invoke-Expression $tool.Value
          if ($LASTEXITCODE -ne 0) {
            Write-Error "$($tool.Key) is not properly installed or not in PATH"
            exit 1
          }
        }
        echo "PATH=C:\Strawberry\perl\bin;C:\Program Files\Git\usr\bin;$env:PATH" >> $env:GITHUB_ENV
        Write-Host "::endgroup::"

    - name: Download and Patch Qt Source
      if: steps.cache-qt-install.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        Write-Host "::group::Downloading Qt source"
        $qtUrl = "https://download.qt.io/official_releases/qt/5.15/${{ env.QT_VERSION }}/single/qt-everywhere-src-${{ env.QT_VERSION }}.zip"
        Invoke-WebRequest -Uri $qtUrl -OutFile "qt-src.zip"
        Expand-Archive -Path "qt-src.zip" -DestinationPath "C:\Qt"
        Rename-Item "C:\Qt\qt-everywhere-src-${{ env.QT_VERSION }}" "C:\Qt\${{ env.QT_VERSION }}-src"
        Write-Host "::endgroup::"

        Write-Host "::group::Applying patches"
        cd "C:\Qt\${{ env.QT_VERSION }}-src"
        git init
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add .
        git commit -m "Initial commit of Qt ${{ env.QT_VERSION }} source"
        
        $patchFiles = Get-ChildItem -Path "${{ github.workspace }}\${{ env.PATCH_DIR }}\*.patch" | Sort-Object Name
        if ($patchFiles.Count -eq 0) {
          Write-Warning "No patch files found in ${{ env.PATCH_DIR }}"
        } else {
          Write-Host "Found $($patchFiles.Count) patch files to apply."
          foreach ($patch in $patchFiles) {
            Write-Host "Applying patch: $($patch.Name)"
            git apply --check --ignore-whitespace --ignore-space-change "$($patch.FullName)"
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Patch check failed for $($patch.Name)"
              exit 1
            }
            git apply --ignore-whitespace --ignore-space-change "$($patch.FullName)"
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to apply patch: $($patch.Name)"
              exit 1
            }
          }
        }
        Write-Host "::endgroup::"

    - name: Configure, Build, and Install Qt
      if: steps.cache-qt-install.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        set QT_SRC_DIR=C:\Qt\${{ env.QT_VERSION }}-src
        set BUILD_DIR=C:\Qt\${{ env.QT_VERSION }}-build
        mkdir %BUILD_DIR%
        cd %BUILD_DIR%

        echo "Initializing v141_xp build environment..."
        call "${{ env.BUILD_TOOLS_PATH }}\VC\Auxiliary\Build\vcvarsall.bat" x64

        echo "Configuring Qt..."
        %QT_SRC_DIR%\configure.bat -prefix ${{ env.INSTALL_PATH }} ^
          -platform win32-msvc -toolset v141_xp ^
          -release -shared -opensource -confirm-license ^
          -optimize-size -mp -no-pch ^
          -nomake examples -nomake tests ^
          -skip qt3d -skip qtactiveqt -skip qtconnectivity -skip qtdatavis3d ^
          -skip qtdeclarative -skip qtlocation -skip qtlottie -skip qtmultimedia ^
          -skip qtnetworkauth -skip qtpurchasing -skip qtquick3d ^
          -skip qtquickcontrols -skip qtquickcontrols2 -skip qtquicktimeline ^
          -skip qtremoteobjects -skip qtsensors -skip qtvirtualkeyboard ^
          -skip qtwebchannel -skip qtwebengine -skip qtwebglplugin ^
          -skip qtwebsockets -skip qtwebview
        if %ERRORLEVEL% NEQ 0 (
          echo "Qt configuration failed!"
          type config.log
          exit /b %ERRORLEVEL%
        )

        echo "Building Qt... This will take a long time."
        nmake
        if %ERRORLEVEL% NEQ 0 (
          echo "Qt build (nmake) failed!"
          exit /b %ERRORLEVEL%
        )

        echo "Installing Qt..."
        nmake install
        if %ERRORLEVEL% NEQ 0 (
          echo "Qt installation (nmake install) failed!"
          exit /b %ERRORLEVEL%
        )

    - name: Verify Installation
      shell: powershell
      run: |
        Write-Host "Verifying Qt installation in ${{ env.INSTALL_PATH }}"
        $criticalFiles = @(
          "${{ env.INSTALL_PATH }}\bin\qmake.exe",
          "${{ env.INSTALL_PATH }}\bin\Qt5Core.dll",
          "${{ env.INSTALL_PATH }}\bin\Qt5Gui.dll",
          "${{ env.INSTALL_PATH }}\bin\Qt5Widgets.dll",
          "${{ env.INSTALL_PATH }}\lib\Qt5Core.lib"
        )
        $missingFiles = @()
        foreach ($file in $criticalFiles) {
          if (-not (Test-Path $file)) {
            $missingFiles += $file
          }
        }
        if ($missingFiles.Count -gt 0) {
          Write-Error "Build verification failed! Missing files:"
          $missingFiles | ForEach-Object { Write-Error "- $_" }
          exit 1
        }
        Write-Host "Installation verification successful. Critical files found."

    - name: Archive Qt Binaries
      uses: actions/upload-artifact@v4
      with:
        name: qt-${{ env.QT_VERSION }}-msvc2017-v141_xp-x64
        path: ${{ env.INSTALL_PATH }}
        if-no-files-found: error

    - name: Save Build Logs on Failure
      if: failure() && steps.cache-qt-install.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          C:\Qt\${{ env.QT_VERSION }}-build\config.log
        if-no-files-found: warn
        
    - name: Post Build Summary
      if: always()
      shell: powershell
      run: |
        $summary = "# Qt ${{ env.QT_VERSION }} Build Summary `n"
        if ('${{ steps.cache-qt-install.outputs.cache-hit }}' == 'true') {
          $summary += "✅ Build artifacts restored from cache. No new build was performed."
        } elseif ('${{ job.status }}' == 'success') {
          $summary += "✅ Build completed and installed successfully."
        } else {
          $summary += "❌ Build failed."
        }
        $summary += "`n- **Platform:** ${{ runner.os }}`n"
        $summary += "- **Toolchain:** v141_xp (for Windows XP compatibility)`n"
        $summary += "- **Commit:** `${{ github.sha }}`"
        
        $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
